import * as vite from 'vite';
import { ResolvedConfig, Connect, Plugin, WatchOptions } from 'vite';
import * as http from 'node:http';
import { IncomingMessage as IncomingMessage$1, IncomingHttpHeaders, OutgoingHttpHeaders, ServerResponse, Server } from 'node:http';
export { ServerResponse } from 'node:http';
import { Http2SecureServer } from 'node:http2';
import { RollupError } from 'rollup';
import { FSWatcher } from 'chokidar';
import EventEmitter from 'node:events';

var version = "2.2.0";

declare const FAKE_FILE_EXTENSIONS: string[];
declare const INFIX_NAME = "fake";

interface IncomingMessage extends IncomingMessage$1 {
    originalUrl?: IncomingMessage$1["url"];
}

interface FakerSchemaServerOptions {
    /**
     * @description Set the folder where the fake `xxx.fake.{ts,js,mjs,cjs,cts,mts}` files is stored.
     * @default fake
     */
    include?: string | string[];
    /**
     * @description Exclude files in the `include` directory.
     * @default []
     */
    exclude?: string | string[];
    /**
     * @description Set the fake files extensions.
     * @default ["ts", "js", "mjs", "cjs", "cts", "mts"]
     */
    extensions?: string[];
    /**
     * @description Set the infix name used in the fake file name.
     * @default fake
     */
    infixName?: string | boolean;
}
type UppercaseHttpMethodType = "GET" | "POST" | "PUT" | "PATCH" | "DELETE" | "HEAD" | "OPTIONS" | "CONNECT" | "TRACE";
type lowercase<T extends string> = T extends Uppercase<T> ? Lowercase<T> : T;
type LowercaseHttpMethod = lowercase<UppercaseHttpMethodType>;
type HttpMethodType = UppercaseHttpMethodType | LowercaseHttpMethod;
type Recordable<T = any> = Record<string, T>;
interface ProcessedRequest {
    /**
     * The URL of the request.
     */
    url: string;
    /**
     * The raw body of the request.
     */
    rawBody: string;
    /**
     * The parsed body of the request, try using `JSON.parse` to get a JSON.
     * May return boolean, number, array, object etc. For convenience, the type is forced to be Record<string, any>.
     */
    body: Recordable;
    /**
     * The query parameters of the request, represented as a key-value object.
     */
    query: Record<string, string | string[]>;
    /**
     * The route parameters of the request, represented as a key-value object.
     */
    params: Record<string, string | string[]>;
    /**
     * The headers of the request.
     */
    headers: IncomingHttpHeaders;
}
/**
 * Represents a fake route in a server application.
 */
interface FakeRoute {
    /**
     * The URL path of the route.
     */
    url: string;
    /**
     * The HTTP method type of the route (e.g., GET, POST, PUT, DELETE).
     * @default GET
     * @see https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods
     */
    method?: HttpMethodType;
    /**
     * The duration in milliseconds after which the request will time out.
     * @default undefined
     */
    timeout?: number;
    /**
     * The HTTP status codes to be sent as the response.
     * @default 200
     * @see https://developer.mozilla.org/en-US/docs/Web/HTTP/Status
     */
    statusCode?: number;
    /**
     * The status text associated with the HTTP status codes.
     * If not provided, a default status text corresponding to the status code will be used.
     * Responses over an HTTP/2 connection will always have an empty string as status message as HTTP/2 does not support them.
     * Option {@link https://github.com/condorheroblog/vite-plugin-fake-server#http2} of the plugin can control this behavior.
     * @see https://developer.mozilla.org/en-US/docs/Web/HTTP/Status
     */
    statusText?: string;
    /**
     * An object containing key(the key is lowercase) and value pairs representing the HTTP headers to be sent in the response.
     * @see https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers
     */
    headers?: OutgoingHttpHeaders;
    /**
     * Supports both synchronous and asynchronous
     * A callback function that handles the response generation based on the received HTTP request, the incoming message, and the server response.
     * @param processedRequest - The ProcessedRequest object representing the processed HTTP request parameters.
     * @param req - The IncomingMessage object representing the incoming HTTP message.
     * @param res - The ServerResponse object representing the server's response.
     * @returns The response data.
     */
    response?: (processedRequest: ProcessedRequest, req: IncomingMessage, res: ServerResponse) => any;
    /**
     * Supports both synchronous and asynchronous
     * A callback function that handles the custom response.
     * @param req - The IncomingMessage object representing the incoming HTTP message.
     * @param res - The ServerResponse object representing the server's response.
     */
    rawResponse?: (req: IncomingMessage, res: ServerResponse) => void;
}

declare function resolveOptions(options?: FakerSchemaServerOptions): {
    readonly include: string[];
    readonly exclude: string[];
    readonly infixName: string | false;
    readonly extensions: string[];
};
type ResolveOptionsType = ReturnType<typeof resolveOptions>;

/**
 * 生成 fake 文件路径列表。
 */
declare function getFakeFilePath(options: ResolveOptionsType, root?: string): string[];

interface GetWatchPathsParams {
    infixName: string | false;
    extensions: string[];
    include: string[];
}
/**
 * 获取监控文件路径的通配符表达式
 */
declare function getWatchPaths({ infixName, extensions, include }: GetWatchPathsParams): string[];

declare function parallelLoader<T>(promises: (() => PromiseLike<T> | T)[], limit?: number): Promise<FakeRoute[]>;

interface ServerBuildOptions {
    /**
     * @description Server port
     * @default 8888
     */
    port?: number;
    /**
     * Directory relative from `root` where build output will be placed. If the
     * directory exists, it will be removed before the build.
     * @default "fakeServer"
     */
    outDir?: string;
}
interface VitePluginFakeServerOptions extends FakerSchemaServerOptions {
    /**
     * @description Set up the service simulator in the production environment.
     * @default false
     */
    enableProd?: boolean;
    /**
     * @description Set up the service simulator in the development environment.
     * @default true
     */
    enableDev?: boolean;
    /**
     * @description Set whether to listen to `include` files.
     * @default true
     */
    watch?: boolean;
    /**
     * @description Set whether to display the request log on the console.
     * @default true
     */
    logger?: boolean;
    /**
     * @description Set default response delay time.
     * @default undefined
     */
    timeout?: number;
    /**
     * @description Set the root address of the request URL.
     * @default ""
     */
    basename?: string;
    /**
     * @description Set default headers for responses.
     * @default {}
     */
    headers?: OutgoingHttpHeaders;
    /**
     * @description The plugin is running in HTTP/2(default HTTP/1).
     * The status text in HTTP/2 is always an empty string.
     * By default, automatically follow Vite's {@link https://vitejs.dev/config/server-options.html#server-https} configuration.
     */
    http2?: boolean;
    /**
     * @description Set whether to export a independently deployable fake service(only valid in build mode).
     * @default false
     */
    build?: boolean | ServerBuildOptions;
}

declare function resolvePluginOptions(options?: VitePluginFakeServerOptions, cwd?: string): {
    enableProd: boolean;
    enableDev: boolean;
    watch: boolean;
    logger: boolean;
    timeout: number | undefined;
    basename: string;
    headers: http.OutgoingHttpHeaders;
    build: boolean | ServerBuildOptions;
    http2: boolean | undefined;
    include: string[];
    exclude: string[];
    infixName: string | false;
    extensions: string[];
};
type ResolvePluginOptionsType = ReturnType<typeof resolvePluginOptions>;

declare const PORT = 8888;
declare const OUTPUT_DIR = "fakeServer";
declare function generateFakeServer(options: ResolvePluginOptionsType, config: ResolvedConfig): Promise<void>;
declare function copyFakeFiles(sourceDir: string, targetDir: string): Promise<void>;

type FakeRouteConfig = FakeRoute[] | FakeRoute;
declare function defineFakeRoute(config: FakeRouteConfig): FakeRouteConfig;

declare function buildPackage(packageName: string): Promise<string | undefined>;

declare function getRequestData(req: IncomingMessage$1): Promise<string>;

declare function isFunction(fn: unknown): fn is Function;

type LogType = "error" | "warn" | "info";
type LogLevel = LogType | "silent";
interface Logger {
    info: (msg: string, options?: LogOptions) => void;
    warn: (msg: string, options?: LogOptions) => void;
    warnOnce: (msg: string, options?: LogOptions) => void;
    error: (msg: string, options?: LogErrorOptions) => void;
    clearScreen: (type: LogType) => void;
    hasErrorLogged: (error: Error | RollupError) => boolean;
    hasWarned: boolean;
}
interface LogOptions {
    clear?: boolean;
    timestamp?: boolean;
}
interface LogErrorOptions extends LogOptions {
    error?: Error | RollupError | null;
}
declare const LogLevels: Record<LogLevel, number>;
interface LoggerOptions {
    prefix?: string;
    allowClearScreen?: boolean;
    customLogger?: Logger;
}
declare function createLogger(level?: LogLevel, options?: LoggerOptions): Logger;

interface CreateFakeMiddlewareOptions extends ResolvePluginOptionsType {
    loggerOutput: Logger;
    root: string;
}
declare function createFakeMiddleware({ loggerOutput, root, ...options }: CreateFakeMiddlewareOptions, httpServer: Server | Http2SecureServer | null): Promise<Connect.NextHandleFunction>;

interface FakeFileLoaderOptions extends ResolvePluginOptionsType {
    loggerOutput: Logger;
    root: string;
}
declare class FakeFileLoader extends EventEmitter {
    #private;
    options: FakeFileLoaderOptions;
    watcher: FSWatcher;
    watcherDeps: FSWatcher;
    constructor(options: FakeFileLoaderOptions);
    get fakeData(): FakeRoute[];
    start(): Promise<void>;
    private watchFakeFile;
    private watchFakeFileDeps;
    private loadFakeData;
    private updateFakeFileDeps;
    private updateFakeData;
    close(): void;
}

declare function vitePluginFakeServer(options?: VitePluginFakeServerOptions): Promise<Plugin>;
declare function resolveIgnored(rootDir: string, include: string[], watchOptions?: WatchOptions | null): vite.AnymatchPattern[];

/**
 * Sleeps for a specified amount of time.
 * @param {number} time - The time to sleep in milliseconds.
 * @returns {Promise<number>} - A Promise that resolves with the timer ID.
 */
function sleep(time) {
	return new Promise((resolve) => {
		const timer = setTimeout(() => {
			resolve(timer);
			clearTimeout(timer);
		}, time);
	});
}

function sleepSync(ms) {
	if (ms <= 0) {
		return;
	}
	const start = performance.now();
	while (performance.now() - start < ms);
}

/**
 * Parses a string into a JSON object.
 * @param {string} str - The string to be parsed.
 * @returns {object} - The parsed to JSON. If parsing fails, a input string is returned.
 */
function tryToJSON(str) {
	let result = "";
	try {
		result = JSON.parse(str);
	}
	catch {
		result = str;
	}
	return result;
}

function createSimulateResponse(sleepFn) {
	/**
	 * Simulates a server response.
	 * @param {object} req - The request object.
	 * @param {Array} fakeModuleList - The list of fake modules.
	 * @param {object} config - The configuration object.
	 * @returns {import('./types').SimulateServerResponseType} - A Promise that resolves with the server response.
	 */
	return function simulateServerResponse(req = {}, fakeModuleList = [], config = {}) {
		const {
			match,
			basename = "",
			defaultTimeout = 0,
			globalResponseHeaders = {},
		} = config;

		/**
		 * Join two paths into a complete path
		 */

		function joinPathname(a, b) {
			const aPathname = new URL(a, "http://localhost:5173/").pathname;
			const bPathname = new URL(b, "http://localhost:5173/").pathname;
			return aPathname.endsWith("/") ? aPathname.slice(0, -1) + bPathname : aPathname + bPathname;
		}

		if (req.url) {
			const instanceURL = new URL(req.url, "http://localhost:5173/");

			// https://nodejs.org/api/url.html#urlpathname
			// Invalid URL characters included in the value assigned to the pathname property are percent-encoded
			const pathname = instanceURL.pathname;

			const matchRequest = fakeModuleList.find((item) => {
				if (!pathname || !item || !item.url) {
					return false;
				}
				const method = item.method ?? "GET";
				const reqMethod = req.method ?? "GET";
				if (method.toUpperCase() !== reqMethod.toUpperCase()) {
					return false;
				}
				const realURL = joinPathname(basename, item.url);
				return !!match(realURL)(pathname);
			});
			if (matchRequest) {
				const {
					response,
					rawResponse,
					timeout = defaultTimeout,
					statusCode,
					statusText,
					url,
					headers: responseHeaders = {},
				} = matchRequest;

				const joinedUrl = joinPathname(basename, url);
				const urlMatch = match(joinedUrl, { encode: encodeURI });

				const searchParams = instanceURL.searchParams;
				const query = {};
				for (const [key, value] of searchParams.entries()) {
					if (Object.prototype.hasOwnProperty.call(query, key)) {
						const queryValue = query[key];
						if (Array.isArray(queryValue)) {
							queryValue.push(value);
						}
						else {
							query[key] = [queryValue, value];
						}
					}
					else {
						query[key] = value;
					}
				}

				let params = {};

				if (pathname) {
					const matchParams = urlMatch(pathname);
					if (matchParams) {
						params = matchParams.params;
					}
				}

				const result = {
					response,
					rawResponse,
					timeout,
					statusCode: statusCode ?? 200,
					statusText,
					url: req.url,
					query,
					params,
					responseHeaders: new Headers({ ...globalResponseHeaders, ...responseHeaders }),
				};
				// timeout
				const delayPromise = timeout ? sleepFn(timeout) : false;
				return delayPromise && delayPromise?.then ? delayPromise.then(() => result) : result;
			}
		}
	};
}

const simulateServerResponse = createSimulateResponse(sleep);

const simulateServerResponseSync = createSimulateResponse(sleepSync);

type SimulateServerResponseType = Promise<{
    response: FakeRoute["response"];
    rawResponse?: FakeRoute["rawResponse"];
    timeout: number;
    statusCode: number;
    statusText?: string;
    url: string;
    query: Record<string, string | string[]>;
    params: Record<string, string>;
    responseHeaders: Headers;
} | undefined>;

export { type CreateFakeMiddlewareOptions, FAKE_FILE_EXTENSIONS, FakeFileLoader, type FakeFileLoaderOptions, type FakeRoute, type FakeRouteConfig, type FakerSchemaServerOptions, type HttpMethodType, INFIX_NAME, type IncomingMessage, type LogErrorOptions, type LogLevel, LogLevels, type LogOptions, type LogType, type Logger, type LoggerOptions, type LowercaseHttpMethod, OUTPUT_DIR, PORT, type ProcessedRequest, type Recordable, type ResolveOptionsType, type ResolvePluginOptionsType, type ServerBuildOptions, type SimulateServerResponseType, type UppercaseHttpMethodType, type VitePluginFakeServerOptions, buildPackage, copyFakeFiles, createFakeMiddleware, createLogger, createSimulateResponse, defineFakeRoute, generateFakeServer, getFakeFilePath, getRequestData, getWatchPaths, isFunction, parallelLoader, resolveIgnored, resolveOptions, resolvePluginOptions, simulateServerResponse, simulateServerResponseSync, sleep, sleepSync, tryToJSON, version, vitePluginFakeServer };
